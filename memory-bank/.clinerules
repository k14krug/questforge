# Project Intelligence

## Development Patterns
1. Always use virtualenvwrapper for environment management
2. Follow Flask application factory pattern
3. Use blueprints for modular organization
4. Implement database models before views
5. Write migrations for all schema changes

## Code Style
- Follow PEP 8 for Python code
- Use Google-style docstrings
- Keep line length under 88 characters
- Use type hints for function signatures

## Project Preferences
- Prefer SQLAlchemy over raw SQL
- Use bcrypt for password hashing
- Implement CSRF protection globally
- Use Flask-Migrate for database migrations

## Workflow Guidelines
1. Update memory bank after all task completions
2. Document all architectural decisions
3. Maintain separate dev/prod configurations
4. Write tests for critical functionality
5. Validate all user inputs
6. Ensure robust validation of JSON inputs, especially for Template creation/editing

## JSON Data Handling
- Be mindful of JSON serialization/deserialization when interacting directly with JSON database fields (e.g., `Template.question_flow`, `initial_state`).
- Use consistent structures for JSON data defined in templates.

## Template Guidelines
- Use Bootstrap 5 for styling
- Implement responsive design
- Use Jinja2 template inheritance
- Create base.html as foundation template
- Include modern navbar with:
  - Brand logo
  - Navigation links
  - User menu (when logged in)
  - Search functionality
- Use consistent spacing and typography
- Implement dark/light mode toggle

## Real-time Communication
- Initialize SocketIO in extensions.py
- Use namespaces for logical separation
- Follow event handler pattern:
  - Validate session first
  - Process request
  - Emit response
- Manage rooms via game IDs
- Keep event payloads minimal
- Use ACK callbacks for critical operations
- Note: Redis pub/sub not currently planned
- **Client-Side JS Modules:** Be cautious with complex JS syntax (like ES6 classes) in external modules (`.js`, `.mjs`). Browsers might have parsing issues (`Unexpected token '{'`). If errors persist despite correct syntax, consider embedding logic directly into the template's `<script type="module">` or using simpler JS object structures for external modules.
- **Global Scope for Modules:** Ensure data needed by external JS modules (like `user_id`) is explicitly set in the global scope (e.g., `window.currentUserId`) within the relevant HTML template before the module is used.

## AI Service Interaction
- Follow patterns outlined in `questforge/services/ai_service.py` and `questforge/services/campaign_service.py`.
- Build prompts systematically, incorporating template data and user input.
- Implement robust validation for AI responses, checking both structure and content plausibility (`Template.validate_ai_response`).
- Handle potential AI service errors gracefully (timeouts, API errors, invalid responses) using retry logic (`Template.generate_ai_content`) and user feedback.
- Manage context effectively to maintain narrative coherence during gameplay.

## API Cost Tracking
- API usage is logged in the `ApiUsageLog` model (`questforge/models/api_usage_log.py`).
- Costs are calculated based on token counts (returned by `AIService`) and pricing defined in the `OPENAI_PRICING` dictionary in `config.py`.
- **Important:** The `OPENAI_PRICING` dictionary keys should be the base model names (e.g., `gpt-4o-mini`). The cost calculation logic attempts an exact match first, then iteratively removes trailing components from the API-returned model name (e.g., `gpt-4o-mini-2024-07-18`) until a matching key is found in the config. Ensure base model names in the config cover expected API model variants.
- The `AIService` fetches the configured `OPENAI_MODEL` from `current_app.config` at the time of each API call to ensure the correct model is requested.

## New .clinerules
- The template redesign shifts the focus from detailed template definitions to high-level guidance, empowering the AI to generate more of the campaign structure.
- Campaign generation is now delayed until after players have joined the lobby and defined their characters, allowing the AI to tailor the campaign to the specific party.
- Player character descriptions are stored in the `game_players` table.
